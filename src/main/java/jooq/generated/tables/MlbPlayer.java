/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.MlbPlayerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MlbPlayer extends TableImpl<MlbPlayerRecord> {

    private static final long serialVersionUID = 1585671841;

    /**
     * The reference instance of <code>public.mlb_player</code>
     */
    public static final MlbPlayer MLB_PLAYER = new MlbPlayer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MlbPlayerRecord> getRecordType() {
        return MlbPlayerRecord.class;
    }

    /**
     * The column <code>public.mlb_player.id</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mlb_player_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.mlb_player.name_first</code>.
     */
    public final TableField<MlbPlayerRecord, String> NAME_FIRST = createField(DSL.name("name_first"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.name_last</code>.
     */
    public final TableField<MlbPlayerRecord, String> NAME_LAST = createField(DSL.name("name_last"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.mlb_team_id</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> MLB_TEAM_ID = createField(DSL.name("mlb_team_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_player.mlb_player_id</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> MLB_PLAYER_ID = createField(DSL.name("mlb_player_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_player.birth_city</code>.
     */
    public final TableField<MlbPlayerRecord, String> BIRTH_CITY = createField(DSL.name("birth_city"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.birth_date</code>.
     */
    public final TableField<MlbPlayerRecord, Timestamp> BIRTH_DATE = createField(DSL.name("birth_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.mlb_player.birth_country</code>.
     */
    public final TableField<MlbPlayerRecord, String> BIRTH_COUNTRY = createField(DSL.name("birth_country"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.age</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> AGE = createField(DSL.name("age"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_player.jersey_number</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> JERSEY_NUMBER = createField(DSL.name("jersey_number"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_player.position</code>.
     */
    public final TableField<MlbPlayerRecord, String> POSITION = createField(DSL.name("position"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.height_ft</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> HEIGHT_FT = createField(DSL.name("height_ft"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_player.height_inches</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> HEIGHT_INCHES = createField(DSL.name("height_inches"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mlb_player.mlb_debut_date</code>.
     */
    public final TableField<MlbPlayerRecord, Timestamp> MLB_DEBUT_DATE = createField(DSL.name("mlb_debut_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.mlb_player.throws</code>.
     */
    public final TableField<MlbPlayerRecord, String> THROWS = createField(DSL.name("throws"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.bats</code>.
     */
    public final TableField<MlbPlayerRecord, String> BATS = createField(DSL.name("bats"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.mlb_player.weight</code>.
     */
    public final TableField<MlbPlayerRecord, Integer> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.mlb_player</code> table reference
     */
    public MlbPlayer() {
        this(DSL.name("mlb_player"), null);
    }

    /**
     * Create an aliased <code>public.mlb_player</code> table reference
     */
    public MlbPlayer(String alias) {
        this(DSL.name(alias), MLB_PLAYER);
    }

    /**
     * Create an aliased <code>public.mlb_player</code> table reference
     */
    public MlbPlayer(Name alias) {
        this(alias, MLB_PLAYER);
    }

    private MlbPlayer(Name alias, Table<MlbPlayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private MlbPlayer(Name alias, Table<MlbPlayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MlbPlayer(Table<O> child, ForeignKey<O, MlbPlayerRecord> key) {
        super(child, key, MLB_PLAYER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MLB_PLAYER_PK, Indexes.MLB_PLAYER_UN);
    }

    @Override
    public Identity<MlbPlayerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MLB_PLAYER;
    }

    @Override
    public UniqueKey<MlbPlayerRecord> getPrimaryKey() {
        return Keys.MLB_PLAYER_PK;
    }

    @Override
    public List<UniqueKey<MlbPlayerRecord>> getKeys() {
        return Arrays.<UniqueKey<MlbPlayerRecord>>asList(Keys.MLB_PLAYER_PK, Keys.MLB_PLAYER_UN);
    }

    @Override
    public MlbPlayer as(String alias) {
        return new MlbPlayer(DSL.name(alias), this);
    }

    @Override
    public MlbPlayer as(Name alias) {
        return new MlbPlayer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MlbPlayer rename(String name) {
        return new MlbPlayer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MlbPlayer rename(Name name) {
        return new MlbPlayer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, String, Integer, Integer, String, Timestamp, String, Integer, Integer, String, Integer, Integer, Timestamp, String, String, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
