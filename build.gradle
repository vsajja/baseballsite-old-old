buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.ratpack:ratpack-gradle:1.8.0'
        classpath 'org.postgresql:postgresql:9.4-1206-jdbc42'
        classpath 'org.jooq:jooq-codegen:3.12.3'
    }
}

apply plugin: 'io.ratpack.ratpack-groovy'
apply plugin: 'idea'

version = '0.0.1-dev'

run {
    jvmArgs "-Dratpack.port=5051"
}

import groovy.xml.MarkupBuilder
import org.jooq.codegen.*

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.postgresql:postgresql:9.4-1205-jdbc42'
    implementation 'org.jooq:jooq:3.12.3'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.ccil.cowan.tagsoup:tagsoup:1.2'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'io.github.http-builder-ng:http-builder-ng-okhttp:1.0.4'

    implementation ratpack.dependency('hikari')
    implementation ratpack.dependency('pac4j')

    runtimeOnly 'org.slf4j:slf4j-simple:1.7.30'

    testImplementation('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testImplementation ratpack.dependency('groovy-test')
}

task stage {
    dependsOn 'build', 'clean', 'installDist'
}
build.mustRunAfter clean

task jooqCodegen {
    doFirst {
        delete 'src/main/java/jooq.generated'
    }
    doLast {
        Properties props = new Properties()
        props.load(new FileInputStream('src/ratpack/db.properties'))
        def writer = new StringWriter()
        new MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.12.0.xsd') {
                    jdbc() {
                        driver('org.postgresql.Driver')
                        url("jdbc:postgresql://" +
                                "${props.get('postgres.serverName')}" +
                                ":" +
                                "${props.get('postgres.portNumber')}" +
                                "/" +
                                "${props.get('postgres.databaseName')}" +
                                "?ssl=true" +
                                "&sslmode=require" +
                                "&sslfactory=org.postgresql.ssl.NonValidatingFactory")
                        user(props.get('postgres.user'))
                        password(props.get('postgres.password'))
                    }
                    generator() {
                        database() {
                            includes('.*')
                            excludes('')
                            inputSchema('public')
                        }

                        // Watch out for this caveat when using MarkupBuilder with "reserved names"
                        // - https://github.com/jOOQ/jOOQ/issues/4797
                        // - http://stackoverflow.com/a/11389034/521799
                        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
                        generate([:]) {
                            pojos true
                            daos true
                            pojosEqualsAndHashCode true
                            fluentSetters true
                        }

                        target() {
                            packageName('jooq.generated')
                            directory('src/main/java')
                        }
                    }
                }

        GenerationTool.generate(writer.toString())
    }
}

task release {
    group = 'release'
    def releaseUi = true

    doLast {
        if (releaseUi) {
            delete {
                delete 'src/ratpack/dist'
            }
            exec {
                workingDir 'portal'
                commandLine 'cmd', '/c', 'npm run build'
            }
            copy {
                println 'copying portal/dist -> src/ratpack/dist'
                from 'portal/dist'
                into 'src/ratpack/dist'
            }
        }
        exec {
            commandLine 'cmd', '/c',
                    "git config core.autocrlf false && " +
                            "git add --all && " +
                            "git commit -m \"release-${project.version}-${new Date().getTime()}\""
        }
        exec {
            commandLine 'cmd', '/c', 'git push --force'
        }
    }
}

release.dependsOn(test)
